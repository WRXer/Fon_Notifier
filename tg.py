import asyncio
import telebot
import logging
import os, re
from telebot.async_telebot import AsyncTeleBot
from dotenv import load_dotenv

from setup_logging import setup_logging
from fon_parse import fetch_and_display_events
from work_data import load_data, save_data

load_dotenv()

TOKEN_BOT = os.getenv('TOKEN_BOT')
LOG_LEVEL = True
ADMIN_ID = os.getenv('ADMIN_ID')

setup_logging()    #–í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

bot = AsyncTeleBot(TOKEN_BOT)
telebot.logger.setLevel(LOG_LEVEL)


chat_ids = set()    #–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


async def send_message():
    try:
        loop = asyncio.get_running_loop()
        tasks = []    #–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        for chat_id in chat_ids:
            message_matches = await loop.run_in_executor(None, fetch_and_display_events, chat_id)

            if message_matches:
                tasks.append(bot.send_message(chat_id, text=message_matches))    #–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
            else:
                logging.info(f"–î–ª—è {chat_id} –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π.")    #–õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
        if tasks:
            await asyncio.gather(*tasks)    #–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_message: {e}")
    asyncio.create_task(schedule_next_message())

async def schedule_next_message():
    await asyncio.sleep(60)    #–ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_message()    #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–Ω–æ–≤–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É

@bot.message_handler(commands=['start'])
async def start_handler(message):
    chat_id = message.chat.id
    chat_ids.add(chat_id)    #–î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Å–ø–∏—Å–æ–∫
    await bot.send_message(chat_id, "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await send_message()    #–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è

@bot.message_handler(commands=['help'])
async def help_handler(message):
    help_text = (
        "üìå **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥**:\n\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥.\n\n"
        "/donate - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π!"
    )
    await bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['donate'])
async def donate_handler(message):
    donate_text = (
        "üí∞ **–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –º–æ–∂–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏**:\n\n"
        "–ß–µ—Ä–µ–∑ **CloudTips**: ‚ñ∂Ô∏è[–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞ üîã](https://pay.cloudtips.ru/p/af008b92)‚óÄÔ∏è\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )
    await bot.send_message(message.chat.id, donate_text, parse_mode="Markdown")

@bot.message_handler(commands=['faq'])
async def help_handler(message):
    faq_text = (
        'üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–∂–∏–º–∞–µ–º "start".\n'
        '–ü–æ—Å–ª–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞: \n–≤—ã –±—É–¥–µ—Ç–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫, –∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n'
        '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–≥–∏:\n'
        '- —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É —Å–æ–±—ã—Ç–∏—è –∏–∑ –Ω—É–∂–Ω–æ–π –≤–∞–º –ª–∏–≥–∏, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ª–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://fon.bet/live/hockey/11111/22222, \n–≥–¥–µ 11111 - –ª–∏–≥–∞ \n'
        '- /id –Ω–æ–º–µ—Ä –ª–∏–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä /id 11111\n\n'
        '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–≥–∏:\n'
        '- /del –Ω–æ–º–µ—Ä –ª–∏–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä /del 11111 \n'
    )
    await bot.send_message(message.chat.id, faq_text, parse_mode="Markdown")

@bot.message_handler(commands=['id'])
async def id_handler(message):
    """
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    :param message:
    :return:
    """
    chat_id = message.chat.id
    try:
        league_id = int(message.text.split()[1])
        data = load_data()

        if str(chat_id) not in data:
            data[str(chat_id)] = []

        if league_id in data[str(chat_id)]:
            await bot.send_message(chat_id, f"ID {league_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        else:
            data[str(chat_id)].append(league_id)
            save_data(data)
            await bot.send_message(chat_id, f"ID {league_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")
    except (IndexError, ValueError):
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç /id <—á–∏—Å–ª–æ>.")

@bot.message_handler(commands=['del'])
async def del_handler(message):
    """
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è del –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    :param message:
    :return:
    """
    chat_id = message.chat.id
    try:
        league_id = int(message.text.split()[1])
        data = load_data()

        if str(chat_id) in data and league_id in data[str(chat_id)]:
            data[str(chat_id)].remove(league_id)
            save_data(data)
            await bot.send_message(chat_id, f"ID {league_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            await bot.send_message(chat_id, f"ID {league_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    except (IndexError, ValueError):
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç /del <—á–∏—Å–ª–æ>.")

@bot.message_handler(func=lambda message: message.text.startswith("https://"))
async def handle_link(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –∫–∏–¥–∞—é—Ç —Å—Å—ã–ª–∫—É
    :param message:
    :return:
    """
    chat_id = str(message.chat.id)
    fon_link = re.search(r'https://fon\.bet/.*?(\d+)(?:/|$)', message.text)
    if not fon_link:    #–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ID, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return
    league_id = int(fon_link.group(1))    #–í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    data = load_data()
    if chat_id not in data:     #–î–æ–±–∞–≤–ª—è–µ–º sport_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        data[chat_id] = []
    if league_id not in data[chat_id]:
        data[chat_id].append(league_id)
        save_data(data)
        await bot.send_message(chat_id, f"ID –ª–∏–≥–∏ {league_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.")
    else:
        await bot.send_message(chat_id, f"ID –ª–∏–≥–∏ {league_id} —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")

@bot.message_handler(commands=['admin'])
async def admin_handler(message):
    chat_id = message.chat.id
    if int(chat_id) == int(ADMIN_ID):    #–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_text = ('–§—É–Ω–∫—Ü–∏–∏:\n'
                      '- /users –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                      '- /data –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n'
                      )
        await bot.send_message(message.chat.id, admin_text, parse_mode="Markdown")
    else:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(commands=['users'])
async def users_handler(message):
    chat_id = message.chat.id
    if int(chat_id) == int(ADMIN_ID):    #–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        league_data = load_data()
        users = list(league_data.keys())    #–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users:
            user_list = "\n".join([f"User ID: {user}" for user in users])
            await bot.send_message(chat_id, f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")
        else:
            await bot.send_message(chat_id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(commands=['data'])
async def data_handler(message):
    chat_id = message.chat.id
    if int(chat_id) == int(ADMIN_ID):    #–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if 'data.json':    #–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
            with open('data.json', 'rb') as file:
                await bot.send_document(chat_id, file, caption="–í–æ—Ç —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await bot.send_message(chat_id, "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

if __name__ == "__main__":
    asyncio.run(bot.infinity_polling(logger_level=True))
